#!/bin/sh
esc() {
    case $1 in
        CUU) e="${esc_c}[${2}A" ;; # cursor up
        CUD) e="${esc_c}[${2}B" ;; # cursor down
        CUF) e="${esc_c}[${2}C" ;; # cursor right
        CUB) e="${esc_c}[${2}D" ;; # cursor left

        SGR)
            case ${PF_COLOR:=1} in
                (1)
                    e="${esc_c}[${2}m"
                ;;

                (0)
                    e=
                ;;
            esac
        ;;

        DECAWM)
            case $TERM in
                (dumb | minix | cons25)
                    e=
                ;;

                (*)
                    e="${esc_c}[?7${2}"
                ;;
            esac
        ;;
    esac
}

esc_p() {
    esc "$@"
    printf '%s' "$e"
}

has() {
    _cmd=$(command -v "$1") 2>/dev/null || return 1
    [ -x "$_cmd" ] || return 1
}

log() {
    [ "$2" ] || return

    name=$1
    {
        set -f
        set +f -- $2
        info=$*
    }

    esc_p CUF "$ascii_width"
    esc_p SGR "3${PF_COL1-4}";
    esc_p SGR 1
    printf '%s' "$name"

    esc_p SGR 0
    printf %s "$PF_SEP"

    esc_p CUB "${#name}"
    esc_p CUF "${PF_ALIGN:-$info_length}"
    esc_p SGR "3${PF_COL2-7}"
    printf '%s' "$info"

    esc_p SGR 0
    printf '\n'

    info_height=$((${info_height:-0} + 1))
}

get_title() {
    user=cagan
    host="m-arch"

    esc SGR 1
    user=$e$user
    esc SGR "3${PF_COL3:-1}"
    user=$e$user
    esc SGR 1
    user=$user$e
    esc SGR 1
    host=$e$host
    esc SGR "3${PF_COL3:-1}"
    host=$e$host

    log "${user}@${host}" " " >&6
}

get_os() {
	log os "$distro" >&6
    distro="Arch Linux"
}

get_kernel() {
    log kernel "$kernel" >&6
}

get_uptime() {

    IFS=. read -r s _ < /proc/uptime

    d=$((s / 60 / 60 / 24))
    h=$((s / 60 / 60 % 24))
    m=$((s / 60 % 60))
    s=$((s % 60))
    case "$d" in ([!0]*) uptime="${uptime}${d}d "; esac
    case "$h" in ([!0]*) uptime="${uptime}${h}h "; esac
    case "$m" in ([!0]*) uptime="${uptime}${m}m "; esac
    case "$s" in ([!0]*) uptime="${uptime}${s}s"; esac

    log uptime "${uptime:-0m}" >&6
}

get_memory() {
    while IFS=':k '  read -r key val _; do
		case $key in
			(MemTotal)
				mem_used=$((mem_used + val))
				mem_full=$val
            ;;

            (Shmem)
                mem_used=$((mem_used + val))
            ;;
            (MemFree | Buffers | Cached | SReclaimable)
                mem_used=$((mem_used - val))
            ;;
            (MemAvailable)
                mem_avail=$val
            ;;
        esac
    done < /proc/meminfo

    case $mem_avail in
        (*[0-9]*)
            mem_used=$(((mem_full - mem_avail) / 1024))
        ;;
         *)
            mem_used=$((mem_used / 1024))
        ;;
    esac

    mem_full=$((mem_full / 1024))

    log memory "${mem_used:-?}M / ${mem_full:-?}M" >&6
}

get_ascii() {
    read_ascii() {
        PF_COL1=${PF_COL1:-${1:-7}}
        PF_COL3=${PF_COL3:-$((${1:-7}%8+1))}
        while IFS= read -r line; do
            ascii="$ascii$line
"
        done
    }
        ([Aa]rch*)
            read_ascii 4 <<-EOF
				${c6}      ___ __ _  __ _  __ _ _ __
				${c6}     / __/ _' |/ _' |/ _' | '_ \\
				${c6}    | (_| (_| | (_| | (_| | | | |
				${c6}     \___\__,_|\__, |\__,_|_| |_|
				${c6}               |___/
			EOF

    while read -r line; do
        ascii_height=$((${ascii_height:-0} + 1))

        [ "${#line}" -gt "${ascii_width:-0}" ] &&
            ascii_width=${#line}

    done <<-EOF
 		$(printf %s "$ascii" | sed 's/\[3.m//g')
	EOF

    ascii_width=$((ascii_width + 10))

    {
        esc_p SGR 1
        printf '%s' "$ascii"
        esc_p SGR 0
        esc_p CUU "$ascii_height"
    } >&6
}

main() {
    [ "$1" = --version ] && {
        printf 'umutfetch 0.69 nice\n'
        exit 0
    }

    [ "$1" = -v ] || {
        exec 2>/dev/null
    }

    exec 6>&1 >/dev/null

    esc_c=$(printf '\033')

    . "${PF_SOURCE:-/dev/null}" ||:

    [ -w "${TMPDIR:-/tmp}" ] || export TMPDIR=~

    for _c in c1 c2 c3 c4 c5 c6 c7 c8; do
        esc SGR "3${_c#?}" 0
        export "$_c=$e"
    done

    esc_p DECAWM l >&6
    trap 'esc_p DECAWM h >&6' EXIT

    read -r os kernel arch <<-EOF
		$(uname -srm)
	EOF

    get_os

    {
        set -f
        set +f -- ${PF_INFO-ascii title os kernel uptime memory}

        for info do
            command -v "get_$info" >/dev/null || continue

            [ "${#info}" -gt "${info_length:-0}" ] &&
                info_length=${#info}
        done
	info_length=$((info_length + 2))
        for info do
            "get_$info"
        done
    }

    [ "${info_height:-0}" -lt "${ascii_height:-0}" ] &&
        cursor_pos=$((ascii_height - info_height))

    while [ "${i:=0}" -le "${cursor_pos:-0}" ]; do
        printf '\n'
        i=$((i + 1))
    done >&6
}

main "$@"
